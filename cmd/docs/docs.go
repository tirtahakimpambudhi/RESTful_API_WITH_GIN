// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://tos.santoshk.dev",
        "contact": {
            "name": "Tirta Hakim Pambudhi",
            "url": "https://github.com/tirtahakimpambudhi",
            "email": "tirtanewwhakim22@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/registers": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create new many users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Register for all roles",
                "parameters": [
                    {
                        "description": "Registers Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UserRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/admin/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve user details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get User By ID for ADMIN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete user by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete or Banned User for ADMIN role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Restore a user by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Restore User for ADMIN role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of all users as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Users array",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete users by IDs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete or Banned User for ADMIN role",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Restore users by IDs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Restore Users for ADMIN role",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/admin/users/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a list of users as JSON based on search criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Users array",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search users by key",
                        "name": "search",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/auth": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "To Check Your Access Token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Middleware"
                ],
                "summary": "To Authentication",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Responds with the access token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "Login for all roles",
                "parameters": [
                    {
                        "description": "Login Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserLoginUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/logout": {
            "delete": {
                "description": "Logout users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "Logout User for all roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "description": "Responds with a Refresh Token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "Get Refresh Token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create new users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "Register for all roles",
                "parameters": [
                    {
                        "description": "Register Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "put": {
                "description": "Update user by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "All"
                ],
                "summary": "Update User for all roles",
                "parameters": [
                    {
                        "description": "Update Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserLoginUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Must be in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request format",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/{id}/todolist": {
            "get": {
                "description": "Retrieve a object Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Get Todolist By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID todolist",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Update Todolist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID Todolist",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Object Todolist for Update Todolist",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TodoListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "description": "Create New Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Create New Todolist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object Todolist for Create Todolist",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TodoListRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "delete": {
                "description": "Retrieve a object Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Delete Todolist By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID todolist",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/{id}/todolists": {
            "get": {
                "description": "Retrieve a list all Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Get all Todolist array",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "post": {
                "description": "Create New Todolists as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Create New Todolists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array Todolist for Create Many",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.TodoListRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            },
            "delete": {
                "description": "Retrieve a object Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Delete Todolist By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must Be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "ID todolist",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        },
        "/user/{id}/todolists/s": {
            "get": {
                "description": "Retrieve a list of all Todolist as JSON",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Todolist"
                ],
                "summary": "Get Todolist array by search key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Must be UUID Format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search keywords for task name, description",
                        "name": "search",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.StandartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.ResponseErrors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.ResponseErrors": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "model.Date": {
            "type": "object",
            "required": [
                "day",
                "month",
                "year"
            ],
            "properties": {
                "day": {
                    "type": "integer",
                    "maximum": 31,
                    "minimum": 1
                },
                "month": {
                    "type": "integer",
                    "maximum": 12,
                    "minimum": 1
                },
                "year": {
                    "type": "integer",
                    "maximum": 2100,
                    "minimum": 1900
                }
            }
        },
        "model.TodoListRequest": {
            "type": "object",
            "required": [
                "description",
                "due_date",
                "task_name"
            ],
            "properties": {
                "completed": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "due_date": {
                    "$ref": "#/definitions/model.Date"
                },
                "priority": {
                    "type": "integer",
                    "minimum": 1
                },
                "task_name": {
                    "type": "string"
                }
            }
        },
        "model.UserLoginUpdateRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5
                }
            }
        },
        "model.UserRequest": {
            "type": "object",
            "required": [
                "email",
                "id",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "$ref": "#/definitions/model.UserRole"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5
                }
            }
        },
        "model.UserRole": {
            "type": "string",
            "enum": [
                "ADMIN",
                "MODERATOR",
                "BASIC"
            ],
            "x-enum-varnames": [
                "Admin",
                "Moderator",
                "Basic"
            ]
        },
        "web.StandartResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.1",
	Host:             "localhost:3500",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "Users & Todolist Service",
	Description:      "Managament Todolist with Users auth",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
